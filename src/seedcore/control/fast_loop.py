# Copyright 2024 SeedCore Contributors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This file is auto-generated by create_seedcore_skeleton.py
"""
Fast Loop (~200ms): energy-aware agent selection (Section 6, 3.x.4).
"""

from ..organs.base import Organ
from ..energy.api import _ledger
from ..energy.grad_adapter import get_global_gradient_bus

def fast_loop_select_agent(organ: Organ, task):
    """Fast cadence selection using gradient cache (fallback to legacy)."""
    try:
        # Lightweight unified state: sample from organ if possible
        try:
            from ..organs.organism_manager import organism_manager
            import asyncio
            us = None
            if organism_manager is not None:
                us = asyncio.run(organism_manager.get_unified_state(agent_ids=list(organ.agents.keys())))
        except Exception:
            us = None
        bus = get_global_gradient_bus()
        grads = bus.latest(us if us is not None else {"agents": {}}, allow_stale=True)
        # If we have dE/dH, choose agent with steepest local descent proxy
        if getattr(grads, 'dE_dH', None) is not None and len(organ.agents) > 0:
            import numpy as np
            dH = grads.dE_dH
            # Map dE/dH rows to agent IDs in current organ by order
            agent_ids = list(organ.agents.keys())
            best_id = agent_ids[0]
            best_score = float('inf')
            for idx, aid in enumerate(agent_ids):
                if idx < dH.shape[0]:
                    score = float(np.linalg.norm(dH[idx]))
                    if score < best_score:
                        best_score = score
                        best_id = aid
            agent = organ.agents[best_id]
            return agent
    except Exception:
        pass
    # Fallback: legacy selection
    agent = organ.select_agent(task)
    return agent