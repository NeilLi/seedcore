# Copyright 2024 SeedCore Contributors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This file is auto-generated by create_seedcore_skeleton.py
"""
Base Organ abstraction.
Each Organ hosts a local coordinator (Fast Loop) that selects agents and reports metrics
upstream to the energy system. See ยง4, ยง6, and ยง3.x gradient proxies.
"""

from __future__ import annotations
import ray
from typing import List, Any, TYPE_CHECKING, Dict

if TYPE_CHECKING:
    from ..agents.ray_actor import RayAgent

@ray.remote
class Organ:
    """
    Stateful Ray-based organ actor for COA framework.
    
    Each organ acts as a specialized container for pools of agents,
    reflecting the "swarm-of-swarms" model central to the COA framework.
    """
    
    def __init__(self, organ_id: str, organ_type: str):
        self.organ_id = organ_id
        self.organ_type = organ_type
        self.agents: Dict[str, 'RayAgent'] = {}

    def register_agent(self, agent_id: str, agent_handle: 'RayAgent'):
        """Registers a Ray agent actor with this organ."""
        self.agents[agent_id] = agent_handle

    def get_agent_count(self) -> int:
        """Returns the number of agents in this organ."""
        return len(self.agents)

    def select_agent(self, task) -> 'RayAgent':
        """
        Selects an agent within the organ for a task.
        TODO: Implement the full energy-aware scoring proxy here.
        """
        if not self.agents:
            raise ValueError("No agents available in this organ.")
        # Simple random selection for now
        import random
        agent_id = random.choice(list(self.agents.keys()))
        return self.agents[agent_id]

    async def run_task(self, task):
        """Selects an agent and executes a task, returning the result."""
        agent = self.select_agent(task)
        # Use .remote() to call the Ray actor method
        result_ref = agent.execute_task.remote(task)
        return await result_ref

    def get_status(self) -> Dict[str, Any]:
        """Returns the current status of the organ."""
        return {
            "organ_id": self.organ_id,
            "organ_type": self.organ_type,
            "agent_count": len(self.agents),
            "agent_ids": list(self.agents.keys()),
            "status": "healthy"  # Explicit status field for health checks
        }

    def get_agent_handles(self) -> Dict[str, 'RayAgent']:
        """Returns all agent handles in this organ."""
        return self.agents.copy()

    def remove_agent(self, agent_id: str) -> bool:
        """Removes an agent from this organ."""
        if agent_id in self.agents:
            del self.agents[agent_id]
            return True
        return False
    
    def ping(self) -> str:
        """Health check method to verify the organ is responsive."""
        return "pong"
