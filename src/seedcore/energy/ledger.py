# Copyright 2024 SeedCore Contributors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This file is auto-generated by create_seedcore_skeleton.py
"""
Energy ledger and incremental accounting.
Implements the rolling per-term energy ledger described in Enhanced-cognitive-core-energy-validation
§3.x.2–3.x.3. See also /energy/gradient telemetry schema.
Key Terms:
    pair, hyper, entropy, reg, mem
    total() returns scalar E
"""

from dataclasses import dataclass

@dataclass
class EnergyLedger:
    pair: float = 0.0
    hyper: float = 0.0
    entropy: float = 0.0
    reg: float = 0.0
    mem: float = 0.0

    @property
    def total(self) -> float:
        return self.pair + self.hyper + self.entropy + self.reg + self.mem

    def reset(self):
        self.pair = self.hyper = self.entropy = self.reg = self.mem = 0.0
    
    def add_pair_delta(self, w: float, sim: float) -> None:
        """Increment pair term by -w*sim (energy drops)."""
        delta = w * sim
        self.pair += delta
        print(f"Updated pair energy by {delta}. New total: {self.pair}")
    
    def add_hyper_delta(self, complexity: float, precision: float) -> None:
        """Increment hyper term based on complexity-precision tradeoff."""
        # Hyper energy increases with complexity, decreases with precision
        delta = complexity - precision
        self.hyper += delta
        print(f"Updated hyper energy by {delta}. New total: {self.hyper}")
    
    def add_entropy_delta(self, choice_count: int, uncertainty: float) -> None:
        """Increment entropy term based on choice availability and uncertainty."""
        # Entropy increases when there are many choices and high uncertainty
        delta = choice_count * uncertainty * 0.1  # Scale factor to keep reasonable
        self.entropy += delta
        print(f"Updated entropy energy by {delta}. New total: {self.entropy}")
    
    def add_reg_delta(self, regularization_strength: float, model_complexity: float) -> None:
        """Increment regularization term based on model complexity control."""
        # Regularization energy increases with model complexity and regularization strength
        delta = regularization_strength * model_complexity
        self.reg += delta
        print(f"Updated reg energy by {delta}. New total: {self.reg}")
    
    def add_mem_delta(self, memory_usage: float, compression_ratio: float) -> None:
        """Increment memory term based on memory usage and compression."""
        # Memory energy increases with usage, decreases with compression
        delta = memory_usage - compression_ratio
        self.mem += delta
        print(f"Updated mem energy by {delta}. New total: {self.mem}")

