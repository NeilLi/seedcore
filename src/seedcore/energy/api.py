# Copyright 2024 SeedCore Contributors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This file is auto-generated by create_seedcore_skeleton.py
"""
Energy API surface.
Provides read_energy() and energy_gradient_payload() with per-term breakdown.
Also exposes a guarded L_tot computation consistent with contractivity limits.
"""

from .ledger import EnergyLedger
from typing import Dict, Any
import time
import numpy as np  # type: ignore

_ledger = EnergyLedger()

def read_energy() -> Dict[str, float]:
    return {
        "pair": _ledger.pair,
        "hyper": _ledger.hyper,
        "entropy": _ledger.entropy,
        "reg": _ledger.reg,
        "mem": _ledger.mem,
        "total": _ledger.total,
    }

def energy_gradient_payload(extra: Dict[str, Any] | None = None) -> Dict[str, Any]:
    E = read_energy()
    p_fast = float((_ledger.__dict__.get("p_fast", None)) or 0.9)
    beta_meta = float((_ledger.__dict__.get("beta_meta", None)) or 0.8)
    beta_mem = float(_ledger.beta_mem)
    rho = 0.99
    L_tot = min(0.999, (p_fast * 1.0 + (1.0 - p_fast) * beta_meta) * rho * beta_mem)

    payload = {
        "ts": int(time.time()),
        "E_terms": E,
        "grad": {  # controller-friendly scalars only
            "dE/dmem": float(beta_mem),
        },
        "p_fast": p_fast,
        "p_esc": 1.0 - p_fast,
        "L_tot": L_tot,
    }
    if extra:
        payload.update(extra)
    return payload
