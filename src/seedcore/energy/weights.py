# Copyright 2024 SeedCore Contributors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This file is auto-generated by create_seedcore_skeleton.py
"""
Adaptive energy weight shaping (Section 19).
Functions:
    adapt_energy_weights() -> applies Δspec, Δacc, Δsmart, Δreason
    project_bounds() -> clamp to safe intervals
"""

from typing import Dict

class EnergyWeights:
    def __init__(self, w_pair=1.0, w_hyper=1.0, alpha=0.5, lambda_reg=0.01, beta_mem=0.2):
        self.w_pair = w_pair
        self.w_hyper = w_hyper
        self.alpha = alpha
        self.lambda_reg = lambda_reg
        self.beta_mem = beta_mem

    def as_dict(self) -> Dict[str, float]:
        return dict(
            w_pair=self.w_pair,
            w_hyper=self.w_hyper,
            alpha=self.alpha,
            lambda_reg=self.lambda_reg,
            beta_mem=self.beta_mem,
        )

    def project_bounds(self):
        # TODO configurable bounds
        self.w_pair   = max(0.0, min(self.w_pair,   10.0))
        self.w_hyper  = max(0.0, min(self.w_hyper,  10.0))
        self.alpha    = max(0.0, min(self.alpha,     5.0))
        self.lambda_reg = max(0.0, min(self.lambda_reg, 1.0))
        self.beta_mem = max(0.0, min(self.beta_mem,  5.0))


def adapt_energy_weights(weights: EnergyWeights, dspec, dacc, dsmart, dreason,
                         gamma_spec=0.1, gamma_acc=0.1, gamma_smart=0.1, gamma_reason=0.1):
    weights.w_pair  *= (1 + gamma_spec*dspec + gamma_acc*dacc)
    weights.w_hyper *= (1 + gamma_reason*dreason)
    weights.alpha   *= (1 - gamma_spec*dspec + max(0.0, -dreason)*gamma_reason)
    weights.lambda_reg *= (1 + gamma_smart*max(0.0,0.0))  # placeholder
    weights.beta_mem   *= (1 + gamma_smart*max(0.0,0.0))  # placeholder
    weights.project_bounds()
