version: "3.9"

services:
  postgres:
    image: pgvector/pgvector:pg16
    container_name: seedcore-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-postgres}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./setup/init_pgvector.sql:/docker-entrypoint-initdb.d/init_pgvector.sql
    networks:
      - seedcore-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  mysql:
    image: mysql:8.0
    container_name: seedcore-mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-rootpassword}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-seedcore}
      MYSQL_USER: ${MYSQL_USER:-seedcore}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-password}
      MYSQL_ROOT_HOST: '%'
    ports:
      - "${MYSQL_PORT:-3306}:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./setup/init_mysql.sql:/docker-entrypoint-initdb.d/init_mysql.sql
    networks:
      - seedcore-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "127.0.0.1", "-uroot", "-p${MYSQL_ROOT_PASSWORD:-rootpassword}"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: >
      --default-authentication-plugin=mysql_native_password
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
      --skip-host-cache
      --host-cache-size=0

  neo4j:
    image: neo4j:5.15
    container_name: seedcore-neo4j
    environment:
      NEO4J_AUTH: ${NEO4J_USER:-neo4j}/${NEO4J_PASSWORD:-password}
      NEO4J_PLUGINS: '["apoc", "graph-data-science"]'
      NEO4J_dbms_security_procedures_unrestricted: apoc.*,gds.*
      NEO4J_dbms_memory_heap_initial__size: 512m
      NEO4J_dbms_memory_heap_max__size: 1G
    ports:
      - "${NEO4J_HTTP_PORT:-7474}:7474"
      - "${NEO4J_BOLT_PORT:-7687}:7687"
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    networks:
      - seedcore-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:7474/browser/"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60s

  # db-seed service for database seeding
  db-seed:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: db-seed
    working_dir: /app
    environment:
      - PYTHONPATH=/app
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=password
    env_file:
      - ../.env
    depends_on:
      postgres:
        condition: service_healthy
      mysql:
        condition: service_healthy
    networks:
      - seedcore-network
    volumes:
      - ..:/app
      - ./artifacts:/data
    command: python -m scripts.populate_mlt_simple
    restart: "no"

  ray-head:
    build:
      context: ..
      dockerfile: docker/Dockerfile.ray
    container_name: ray-head
    shm_size: '4gb'
    working_dir: /app
    environment:
      - PYTHONPATH=/app:/app/src:${PYTHONPATH}
      # ── stream every worker's stdout/stderr to the container log ──
      - RAY_worker_stdout_file=/dev/stdout
      - RAY_worker_stderr_file=/dev/stderr
      # ── keep the driver  (seedcore‑api)  log lines too ──
      - RAY_log_to_driver=1
      # ── lower Ray's own log level so we still see our INFO lines ──
      - RAY_BACKEND_LOG_LEVEL=info
    volumes:
      - ..:/app  # Mounts the project root into /app in the container
      - ./artifacts:/data  # Mount artifacts directory for UUID access
    ports:
      - "8265:8265"      # dashboard UI
      - "52365:52365"    # agent gRPC port
      - "52366:52366"    # agent HTTP port
      - "10001:10001"
      - "6379:6379"
    networks:
      - seedcore-network
    # Removed depends_on db-seed since it's disabled
    # healthcheck:
    #   test: ["CMD", "curl", "-sf", "http://localhost:8265/api/version"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3
    #   start_period: 60s
    command: >
      ray start --head
                --dashboard-host 0.0.0.0
                --dashboard-port 8265
                --dashboard-agent-grpc-port 52365
                --dashboard-agent-listen-port 52366
                --include-dashboard true
                --num-cpus 1
                --block

  ray-worker:
    build:
      context: ..
      dockerfile: docker/Dockerfile.ray
    container_name: ray-worker
    shm_size: '2gb'
    working_dir: /app
    environment:
      - PYTHONPATH=/app:/app/src:${PYTHONPATH}
      # ── stream every worker's stdout/stderr to the container log ──
      - RAY_worker_stdout_file=/dev/stdout
      - RAY_worker_stderr_file=/dev/stderr
      # ── keep the driver  (seedcore‑api)  log lines too ──
      - RAY_log_to_driver=1
      # ── lower Ray's own log level so we still see our INFO lines ──
      - RAY_BACKEND_LOG_LEVEL=info
    volumes:
      - ..:/app  # Mounts the project root into /app in the container
      - ./artifacts:/data  # Mount artifacts directory for UUID access
    depends_on:
      ray-head:
        condition: service_started
    networks:
      - seedcore-network
    # healthcheck:
    #   test: ["CMD", "curl", "-sf", "http://localhost:8265/api/version"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3
    #   start_period: 60s
    command: ray start --address=ray-head:6379 --num-cpus 1 --block

  seedcore-api:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: seedcore-api
    working_dir: /app
    environment:
      - PYTHONPATH=/app:/app/src:${PYTHONPATH}
    env_file:
      - ../.env
    ports:
      - "80:8000"
    depends_on:
      postgres:
        condition: service_healthy
      mysql:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      ray-head:
        condition: service_started
    networks:
      - seedcore-network
    volumes:
      - ..:/app  # Mounts the project root into /app in the container
      - ./artifacts:/data  # Mount artifacts directory for UUID access
    command: uvicorn src.seedcore.telemetry.server:app --host 0.0.0.0 --port 8000 --reload

volumes:
  postgres_data:
  mysql_data:
  neo4j_data:
  neo4j_logs:
  neo4j_import:
  neo4j_plugins:

networks:
  seedcore-network:
    driver: bridge

