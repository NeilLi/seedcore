# version: "3.9"  # Deprecated in Docker Compose V2, kept for legacy tooling

services:
  postgres:
    image: pgvector/pgvector:pg16
    container_name: seedcore-postgres
    profiles: ["core"]
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./setup/init_pgvector.sql:/docker-entrypoint-initdb.d/init_pgvector.sql:ro
    networks:
      - seedcore-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  mysql:
    image: mysql:8.0
    container_name: seedcore-mysql
    profiles: ["core"]
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: seedcore
      MYSQL_USER: seedcore
      MYSQL_PASSWORD: password
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./setup/init_mysql.sql:/docker-entrypoint-initdb.d/init_mysql.sql:ro
    networks:
      - seedcore-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5

  neo4j:
    image: neo4j:5.15
    container_name: seedcore-neo4j
    profiles: ["core"]
    environment:
      NEO4J_AUTH: neo4j/password
      NEO4J_PLUGINS: '["apoc"]'
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    networks:
      - seedcore-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:7474/browser/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # PgBouncer for advanced PostgreSQL connection pooling
  pgbouncer:
    image: bitnami/pgbouncer:1.20.1
    container_name: seedcore-pgbouncer
    profiles: ["core"]
    environment:
      POSTGRESQL_HOST: postgres
      POSTGRESQL_PORT: 5432
      POSTGRESQL_USERNAME: postgres
      POSTGRESQL_PASSWORD: password
      POSTGRESQL_DATABASE: postgres
      PGBOUNCER_PORT: 6432
      PGBOUNCER_POOL_MODE: transaction
      PGBOUNCER_MAX_CLIENT_CONN: 1000
      PGBOUNCER_DEFAULT_POOL_SIZE: 20
      PGBOUNCER_DEFAULT_POOL_TIMEOUT: 30
      PGBOUNCER_SERVER_RESET_QUERY: DISCARD ALL
      PGBOUNCER_SERVER_CHECK_QUERY: SELECT 1
      PGBOUNCER_SERVER_CHECK_DELAY: 30
      PGBOUNCER_CLIENT_TLS_SSLMODE: disable
      PGBOUNCER_ADMIN_PASSWORD: pgbouncer_admin
    ports:
      - "6432:6432"
      - "6433:6433"  # Admin interface
    networks:
      - seedcore-network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "PGPASSWORD=password psql -h localhost -p 6432 -U postgres -d postgres -c 'SELECT 1' > /dev/null 2>&1"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching (dedicated service for energy system and API caching)
  redis:
    image: redis:7.2-alpine
    container_name: seedcore-redis
    profiles: ["core"]
    ports:
      - "6379:6379"  # Standard Redis port for caching
    volumes:
      - redis_data:/data
    networks:
      - seedcore-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru

  ray-head:
    build:
      context: ..
      dockerfile: docker/Dockerfile.ray
      # dockerfile: docker/Dockerfile.ray.optimized
    image: seedcore-ray-head:latest
    container_name: seedcore-ray-head
    profiles: ["ray"]
    shm_size: '4gb'
    working_dir: /app
    environment:
      PYTHONPATH: /app:/app/src
      # ── Ray connection address for internal use ──
      # In Ray 2.20, the head container needs RAY_ADDRESS for Ray Serve to connect
      # This enables the client server on localhost:10001 for internal connections
      RAY_ADDRESS: ray://localhost:10001
      # ── API service configuration for agents ──
      SEEDCORE_API_ADDRESS: seedcore-api:8002
      # ── Local Ray Serve configuration for internal connections ──
      RAY_SERVE_ADDRESS: localhost:8000
      # ── stream every worker's stdout/stderr to the container log ──
      RAY_worker_stdout_file: /dev/stdout
      RAY_worker_stderr_file: /dev/stderr
      # ── keep the driver  (seedcore‑api)  log lines too ──
      RAY_log_to_driver: 1
      # ── lower Ray's own log level so we still see our INFO lines ──
      RAY_BACKEND_LOG_LEVEL: info
      # ── disable usage stats collection (silences warning) ──
      RAY_USAGE_STATS_ENABLED: "0"
      # ── disable additional metrics server to prevent port conflicts ──
      RAY_DISABLE_METRICS_SERVER: "0"
      # ── Ray 2.20.0 specific configurations ──
      RAY_METRICS_EXPORT_PORT: "8080"
      RAY_DASHBOARD_METRICS_PORT: "8080"
      # ── Ray Dashboard monitoring configuration ──
      RAY_PROMETHEUS_HOST: http://prometheus:9090
      RAY_GRAFANA_HOST: http://grafana:3000
      RAY_GRAFANA_IFRAME_HOST: ${PUBLIC_GRAFANA_URL}
      RAY_PROMETHEUS_NAME: Prometheus
      # ── Ray Serve configuration for dashboard integration ──
      RAY_SERVE_ENABLE_DASHBOARD_INTEGRATION: "1"
      RAY_SERVE_DASHBOARD_HOST: "0.0.0.0"
      RAY_SERVE_DASHBOARD_PORT: "8000"
      # ── Asyncio configuration to prevent Ray Serve controller errors ──
      PYTHONASYNCIODEBUG: "1"
      RAY_SERVE_ASYNC_DEBUG: "1"
      # ── Ray Serve stability settings ──
      RAY_SERVE_CONTROLLER_HEARTBEAT_TIMEOUT_S: "30"
      RAY_SERVE_PROXY_HEARTBEAT_TIMEOUT_S: "30"

    volumes:
      - ..:/app  # Mounts the project root into /app in the container
      - ./artifacts:/data  # Mount artifacts directory for UUID access
    ports:
      # ── Expose *only* what the outside world needs ─────────────── #
      - "8265:8265"      # Ray Dashboard UI
      - "8000:8000"      # Ray Serve HTTP externally
      - "8080:8080"      # Ray Metrics
      - "6380:6380"      # Ray GCS (Global Control Store) - needed for remote workers
    networks:
      - seedcore-network
    depends_on:
      postgres:
        condition: service_healthy
      mysql:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 4g
    healthcheck:
      test: ["CMD-SHELL", "python -c \"import ray; ray.init(address='ray://localhost:10001', ignore_reinit_error=True); print('Ray is ready')\" || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 15
      start_period: 120s # Generous grace period for startup
    command: ["/bin/bash", "docker/start-ray-with-serve.sh"]

  # Ray workers are defined in ray-workers.yml
  # To start workers: docker compose -f ray-workers.yml up -d

  seedcore-api:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    image: seedcore-api:latest
    container_name: seedcore-api
    profiles: ["api"]
    working_dir: /app
    environment:
      PYTHONPATH: /app:/app/src
      RAY_ADDRESS: ray://ray-head:10001
      RAY_SERVE_ADDRESS: ray://ray-head:8000
      SEEDCORE_API_ADDRESS: localhost:8002
      SEEDCORE_NS: seedcore
      SEEDCORE_STAGE: dev
      RAY_memory_usage_threshold: 0.8
      RAY_memory_monitor_refresh_ms: 2500
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USER: neo4j
      NEO4J_PASSWORD: password
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: 0
    env_file:
      - .env
    ports:
      - "8002:8002"
    depends_on:
      postgres:
        condition: service_healthy
      mysql:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      redis:
        condition: service_healthy
      ray-head:
        condition: service_healthy
    networks:
      - seedcore-network
    volumes:
      - ..:/app  # Mounts the project root into /app in the container
      - ./artifacts:/data  # Mount artifacts directory for UUID access
    deploy:
      resources:
        limits:
          memory: 4g
    command:
      - /bin/sh
      - -c
      - |
        echo "⏳ Waiting for Ray to be fully ready..."
        sleep 10
        echo "⏳ Seeding core databases …"
        python -m scripts.populate_mlt_simple && \
        echo "✅ Seeding complete, starting API" && \
        if [ "$DEV_RELOAD" = "1" ]; then
          uvicorn src.seedcore.telemetry.server:app --host 0.0.0.0 --port 8002 --reload
        else
          uvicorn src.seedcore.telemetry.server:app --host 0.0.0.0 --port 8002
        fi

  # ───────────────────────────────────────────────────────────────────── #
  # Observability stack
  # ───────────────────────────────────────────────────────────────────── #
  
  prometheus:
    image: prom/prometheus:v2.52.0
    container_name: seedcore-prometheus
    profiles: ["obs"]
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./prometheus_rules.yml:/etc/prometheus/prometheus_rules.yml:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    depends_on:
      - seedcore-api
      - ray-head
    networks:
      - seedcore-network

  grafana:
    image: grafana/grafana:11.0.0
    container_name: seedcore-grafana
    profiles: ["obs"]
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=seedcore
      - GF_SECURITY_ALLOW_EMBEDDING=true
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Viewer
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - seedcore-network

  node-exporter:
    image: prom/node-exporter:v1.8.1
    container_name: seedcore-node-exporter
    profiles: ["obs"]
    ports:
      - "9100:9100"
    networks:
      - seedcore-network

volumes:
  postgres_data:
  mysql_data:
  neo4j_data:
  neo4j_logs:
  neo4j_import:
  neo4j_plugins:
  redis_data:

networks:
  seedcore-network:
    external: true

