# docker/Dockerfile.serve
FROM rayproject/ray:2.33.0-py310

SHELL ["/bin/bash", "-euo", "pipefail", "-c"]

ARG BUILD_DATE
ARG VCS_REF
LABEL org.opencontainers.image.title="seedcore-serve" \
      org.opencontainers.image.description="SeedCore Serve on Ray" \
      org.opencontainers.image.version="2.33.0-py310" \
      org.opencontainers.image.created="${BUILD_DATE}" \
      org.opencontainers.image.revision="${VCS_REF}" \
      org.opencontainers.image.source="seedcore"

# ---- Python deps ----
# If you want FastAPI-based /health, ensure requirements include:
#   fastapi==0.*  starlette==0.*  (starlette pulled by fastapi)
COPY docker/requirements-minimal.txt /tmp/requirements.txt
# Optional: use buildx cache for pip to speed rebuilds
# RUN --mount=type=cache,target=/root/.cache/pip \
RUN python -m pip install --upgrade pip wheel && \
    PIP_NO_CACHE_DIR=1 pip install --no-cache-dir -r /tmp/requirements.txt

# ---- App files ----
WORKDIR /app
COPY --chown=ray:ray src/ ./src/
COPY --chown=ray:ray scripts/ ./scripts/
COPY --chown=ray:ray docker/ ./docker/
COPY --chown=ray:ray entrypoints/ ./entrypoints/

# ---- Runtime env ----
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONPATH=/app:/app/src \
    PATH="/home/ray/.local/bin:${PATH}" \
    RAY_USAGE_STATS_ENABLED=0

# Serve HTTP (and optionally Ray dashboard if you want to forward it)
# EXPOSE 8000
EXPOSE 8265

USER ray

# ✅ Healthcheck (enabled): your entrypoint deploys /health early and independently.
# ✅ Healthcheck (exec form; no heredoc)
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=10 \
  CMD ["python","-c","import sys,urllib.request; u='http://127.0.0.1:8000/health'; \
try:\n r=urllib.request.urlopen(u, timeout=5); sys.exit(0 if r.getcode()==200 else 1)\nexcept Exception:\n sys.exit(1)"]


