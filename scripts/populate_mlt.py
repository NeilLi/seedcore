#!/usr/bin/env python3
"""
Script to populate Long-Term Memory (Mlt) with critical information for Scenario 1.
This script inserts a sample 'fact_X' into the Long-Term Memory so it can be retrieved
during the collaborative task scenario.
"""

import os
import sys
import asyncio
import json

# Add the project root to the Python path
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from src.seedcore.memory.long_term_memory import LongTermMemoryManager

async def populate_fact_x():
    """
    Inserts a sample 'fact_X' into the Long-Term Memory.
    This fact will be required by agents in the collaborative task scenario.
    """
    print("🔗 Connecting to Long-Term Memory...")
    mlt = LongTermMemoryManager()
    
    # Create a sample embedding (in a real system, this would be generated by an embedding model)
    # Using a simple vector for demonstration
    embedding = [0.1] * 768  # 768-dimensional embedding
    
    fact_x_data = {
        "vector": {
            "id": "fact_X_uuid",  # Use a consistent ID for lookup
            "embedding": embedding,
            "meta": {
                "type": "critical_fact", 
                "content": "The launch code is 1234.",
                "description": "Critical launch sequence code required for system initialization",
                "priority": "high",
                "tags": ["launch", "security", "critical"]
            }
        },
        "graph": {
            "src_uuid": "task-alpha",
            "rel": "REQUIRES",
            "dst_uuid": "fact_X_uuid",
            "meta": {
                "relationship_type": "dependency",
                "strength": 0.9
            }
        }
    }
    
    print("📝 Inserting 'fact_X' into Mlt...")
    try:
        success = await mlt.insert_holon(fact_x_data)
        
        if success:
            print("✅ Successfully inserted 'fact_X' into Long-Term Memory.")
            print(f"   - ID: {fact_x_data['vector']['id']}")
            print(f"   - Content: {fact_x_data['vector']['meta']['content']}")
            print(f"   - Type: {fact_x_data['vector']['meta']['type']}")
        else:
            print("🚨 Failed to insert 'fact_X' into Long-Term Memory.")
            return False
            
    except Exception as e:
        print(f"🚨 Error inserting 'fact_X': {e}")
        return False
    
    return True

async def verify_fact_x():
    """
    Verifies that fact_X was successfully inserted and can be retrieved.
    """
    print("\n🔍 Verifying fact_X insertion...")
    mlt = LongTermMemoryManager()
    
    try:
        # Try to retrieve the fact by ID
        result = await mlt.query_holon_by_id("fact_X_uuid")
        
        if result:
            print("✅ Successfully retrieved 'fact_X' from Long-Term Memory.")
            print(f"   - Retrieved data: {result}")
        else:
            print("⚠️ Could not retrieve 'fact_X' from Long-Term Memory.")
            return False
            
    except Exception as e:
        print(f"🚨 Error verifying 'fact_X': {e}")
        return False
    
    return True

async def main():
    """Main function to populate and verify fact_X."""
    print("🚀 Starting Long-Term Memory population for Scenario 1...")
    print("=" * 60)
    
    # Step 1: Populate fact_X
    success = await populate_fact_x()
    
    if success:
        # Step 2: Verify the insertion
        await verify_fact_x()
        
        print("\n" + "=" * 60)
        print("✅ Long-Term Memory population completed successfully!")
        print("📋 Ready for Scenario 1: Collaborative Task with Knowledge Gap")
        print("\nNext steps:")
        print("1. Run the scenario execution script")
        print("2. Monitor agent interactions with memory tiers")
        print("3. Verify cache miss -> cache hit behavior")
    else:
        print("\n" + "=" * 60)
        print("🚨 Long-Term Memory population failed!")
        print("Please check your database connections and try again.")

if __name__ == "__main__":
    # Run the async main function
    asyncio.run(main()) 