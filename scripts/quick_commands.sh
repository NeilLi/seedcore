#!/bin/bash
# Quick Commands for Dispatcher Database Troubleshooting
# Run this script to get all the essential commands in one place

echo "ðŸš€ DISPATCHER DATABASE TROUBLESHOOTING - QUICK COMMANDS"
echo "======================================================"
echo ""

echo "ðŸ“‹ 1. CHECK DISPATCHER ACTORS"
echo "-----------------------------"
echo "# Get dispatcher status"
echo "kubectl exec -it <ray-head-pod> -- python -c \""
echo "import ray"
echo "ray.init()"
echo "for i in range(2):"
echo "    try:"
echo "        actor = ray.get_actor(f'seedcore_dispatcher_{i}', namespace='seedcore-dev')"
echo "        status = ray.get(actor.get_status.remote())"
echo "        print(f'Dispatcher {i}:', status)"
echo "    except Exception as e:"
echo "        print(f'Dispatcher {i}: ERROR - {e}')"
echo "\""
echo ""

echo "ðŸ“‹ 2. CHECK DISPATCHER LOGS"
echo "---------------------------"
echo "# Find dispatcher PIDs"
echo "kubectl exec -it <ray-worker-pod> -- ray list actors | grep Dispatcher"
echo ""
echo "# Tail dispatcher logs (replace <PID> with actual PID)"
echo "kubectl exec -it <ray-worker-pod> -- tail -f /tmp/ray/session_latest/logs/*<PID>*.log"
echo ""

echo "ðŸ“‹ 3. TEST DATABASE CONNECTIVITY"
echo "-------------------------------"
echo "# Test from Ray worker pod"
echo "kubectl exec -it <ray-worker-pod> -- psql -h postgresql -U postgres -d seedcore -c 'SELECT 1'"
echo ""
echo "# Test from database pod"
echo "kubectl exec -it <postgres-pod> -- psql -U postgres -d seedcore -c 'SELECT 1'"
echo ""

echo "ðŸ“‹ 4. VERIFY TASKS TABLE"
echo "------------------------"
echo "# Check table structure"
echo "kubectl exec -it <postgres-pod> -- psql -U postgres -d seedcore -c '\\d+ tasks'"
echo ""
echo "# Check for queued tasks"
echo "kubectl exec -it <postgres-pod> -- psql -U postgres -d seedcore -c \""
echo "SELECT id, status, created_at, updated_at, locked_by, locked_at"
echo "FROM tasks"
echo "WHERE status = 'queued'"
echo "ORDER BY created_at DESC"
echo "LIMIT 5;"
echo "\""
echo ""

echo "ðŸ“‹ 5. MANUAL CLAIM QUERY TEST"
echo "-----------------------------"
echo "# Test the dispatcher's claim query manually"
echo "kubectl exec -it <postgres-pod> -- psql -U postgres -d seedcore"
echo ""
echo "# In psql, run:"
echo "BEGIN;"
echo "SELECT id, type, description, created_at FROM tasks WHERE status = 'queued' ORDER BY created_at LIMIT 3;"
echo "WITH c AS (SELECT id FROM tasks WHERE status IN ('queued','retry') AND (run_after IS NULL OR run_after <= NOW()) ORDER BY created_at FOR UPDATE SKIP LOCKED LIMIT 1) UPDATE tasks t SET status='running', locked_by='manual_test', locked_at=NOW(), attempts = t.attempts + 1 FROM c WHERE t.id = c.id RETURNING t.id, t.type, t.description;"
echo "ROLLBACK;"
echo ""

echo "ðŸ“‹ 6. COMPREHENSIVE DIAGNOSTICS"
echo "-------------------------------"
echo "# Run automated diagnostic script"
echo "kubectl exec -it <ray-head-pod> -- python /app/scripts/diagnose_dispatcher_db.py"
echo ""

echo "ðŸ“‹ 7. RESTART DISPATCHERS"
echo "-------------------------"
echo "# Restart all dispatchers"
echo "kubectl exec -it <ray-head-pod> -- python /app/scripts/bootstrap_dispatchers.py"
echo ""

echo "ðŸ“‹ 8. MONITORING COMMANDS"
echo "-------------------------"
echo "# Monitor dispatcher health every minute"
echo "while true; do"
echo "  kubectl exec -it <ray-head-pod> -- python -c \""
echo "import ray"
echo "ray.init()"
echo "try:"
echo "    actor = ray.get_actor('seedcore_dispatcher_0', namespace='seedcore-dev')"
echo "    status = ray.get(actor.get_status.remote())"
echo "    print(f'Health: {status.get(\"status\")}, Pool: {status.get(\"pool_initialized\")}')"
echo "except Exception as e:"
echo "    print(f'Error: {e}')"
echo "\""
echo "  sleep 60"
echo "done"
echo ""

echo "ðŸ“‹ 9. EMERGENCY RECOVERY"
echo "------------------------"
echo "# Kill all dispatchers"
echo "kubectl exec -it <ray-head-pod> -- python -c \""
echo "import ray"
echo "ray.init()"
echo "for i in range(10):"
echo "    try:"
echo "        actor = ray.get_actor(f'seedcore_dispatcher_{i}', namespace='seedcore-dev')"
echo "        ray.kill(actor, no_restart=True)"
echo "        print(f'Killed dispatcher {i}')"
echo "    except:"
echo "        break"
echo "\""
echo ""

echo "ðŸ“‹ 10. USEFUL KUBECTL COMMANDS"
echo "------------------------------"
echo "# Get all pods"
echo "kubectl get pods -A"
echo ""
echo "# Get Ray pods"
echo "kubectl get pods -l ray.io/cluster=seedcore"
echo ""
echo "# Get database pods"
echo "kubectl get pods -l app=postgres"
echo ""
echo "# Check pod logs"
echo "kubectl logs <pod-name>"
echo ""
echo "# Get pod details"
echo "kubectl describe pod <pod-name>"
echo ""

echo "======================================================"
echo "ðŸ’¡ TIP: Replace <ray-head-pod>, <ray-worker-pod>, <postgres-pod> with actual pod names"
echo "ðŸ’¡ TIP: Use 'kubectl get pods' to find the correct pod names"
echo "ðŸ’¡ TIP: Run the diagnostic script first for automated troubleshooting"
echo "======================================================"
